<?php

$prefGroups['identities'] = array(
    'column' => _("Your Information"),
    'label' => _("Personal Information"),
    'desc' => _("Change your personal information."),
    'members' => array('id', 'fullname', 'from_addr', 'location'),
    'type' => 'identities'
);

$_prefs['id'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Identity's name:")
);

$_prefs['fullname'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Your full name:")
);

$_prefs['from_addr'] = array(
    'value' => '',
    'locked' => {{ horde_automate_sender_address | default(true) }},
    'hook' => {{ horde_automate_sender_address | default(true) }},
    'shared' => true,
    'type' => 'text',
    'desc' =>  _("The default e-mail address to use with this identity:")
);

$_prefs['location'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Default location to use for location-aware features.")
);

$_prefs['default_identity'] = array(
    'value' => 0
);

$_prefs['identities'] = array(
    // default value = serialize(array())
    'value' => 'a:0:{}'
);

$_prefs['confirm_email'] = array(
    // default value = serialize(array())
    'value' => 'a:0:{}'
);



// *** Authentication Preferences ***

$prefGroups['forgotpass'] = array(
    'column' => _("Your Information"),
    'label' => _("Account Password"),
    'desc' => _("Set preferences to allow you to reset your password if you ever forget it."),
    'members' => array(
        'security_question', 'security_answer', 'alternate_email'
    ),
    'suppress' => function() {
        if (!$GLOBALS['conf']['auth']['resetpassword']) {
            return true;
        }
        try {
            $GLOBALS['injector']->getInstance('Horde_Core_Factory_Auth')->create()->hasCapability('update');
            return false;
        } catch (Horde_Exception $e) {}
        return true;
    }
);

$_prefs['security_question'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Enter a security question which you will be asked if you need to reset your password, e.g. 'what is the name of your pet?':")
);

$_prefs['security_answer'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Insert the required answer to the security question:")
);

$_prefs['alternate_email'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Insert an email address to which you can receive the new password:")
);



// *** Locale/Time Preferences ***

$prefGroups['language'] = array(
    'column' => _("Your Information"),
    'label' => _("Locale and Time"),
    'desc' => _("Set your preferred language, timezone and date preferences."),
    'members' => array(
        'language', 'sending_charset', 'timezone', 'twentyFour', 'date_format',
        'date_format_mini', 'time_format', 'first_week_day'
    )
);

$_prefs['language'] = array(
    'value' => '',
    'type' => 'enum',
    'enum' => array(),
    'escaped' => true,
    'desc' => _("Select your preferred language:"),
    'on_init' => function($ui) {
        $enum = $GLOBALS['registry']->nlsconfig->languages;
        array_unshift($enum, _("Default"));
        $ui->prefs['language']['enum'] = $enum;
    },
    'on_change' => function() {
        global $prefs, $registry;
        $registry->setLanguageEnvironment($prefs->getValue('language'));
        foreach ($registry->listApps() as $app) {
            if ($registry->isAuthenticated(array('app' => $app, 'notransparent' => true))) {
                $registry->callAppMethod($app, 'changeLanguage');
            }
        }
    }
);

$_prefs['sending_charset'] = array(
    'value' => 'UTF-8',
    'advanced' => true,
    // Sending charset is locked by default.
    'locked' => true,
    'type' => 'enum',
    'enum' => array_merge(
        array('' => _("Default")),
        $GLOBALS['registry']->nlsconfig->encodings_sort
    ),
    'desc' => _("Default charset for sending e-mail messages:")
);

$_prefs['timezone'] = array(
    'value' => '',
    'type' => 'enum',
    'enum' => array(),
    'desc' => _("Your current time zone:"),
    'on_init' => function($ui) {
        $enum = Horde_Nls::getTimezones();
        array_unshift($enum, _("Default"));
        $ui->prefs['timezone']['enum'] = $enum;
    },
);

$_prefs['twentyFour'] = array(
    'value' => false,
    'type' => 'checkbox',
    'desc' => _("Display 24-hour times?")
);

$_prefs['date_format'] = array(
    'value' => '%x',
    'type' => 'enum',
    'enum' => array(
        '%x' => strftime('%x'),
        '%Y-%m-%d' => strftime('%Y-%m-%d'),
        '%d/%m/%Y' => strftime('%d/%m/%Y'),
        '%A, %B %d, %Y' => strftime('%A, %B %d, %Y'),
        '%A, %d. %B %Y' => strftime('%A, %d. %B %Y'),
        '%A, %d %B %Y' => strftime('%A, %d %B %Y'),
        '%a, %b %e, %Y' => strftime('%a, %b %e, %Y'),
        '%a, %b %e, %y' => strftime('%a, %b %e, %y'),
        '%a, %b %e' => strftime('%a, %b %e'),
        '%a, %e %b %Y' => strftime('%a, %e %b %Y'),
        '%a, %e %b %y' => strftime('%a, %e %b %y'),
        '%a %d %b %Y' => strftime('%a %d %b %Y'),
        '%a %x' => strftime('%a %x'),
        '%a %Y-%m-%d' => strftime('%a %Y-%m-%d'),
        '%e %b %Y' => strftime('%e %b %Y'),
        '%e. %b %Y' => strftime('%e. %b %Y'),
        '%e. %m %Y' => strftime('%e %m %Y'),
        '%e. %m.' => strftime('%e. %m.'),
        '%e. %B' => strftime('%e. %B'),
        '%e. %B %Y' => strftime('%e. %B %Y'),
        '%e. %B %y' => strftime('%e. %B %y'),
        '%B %e, %Y' => strftime('%B %e, %Y'),
    ),
    'desc' => _("Choose how to display dates (full format):"),
);

$_prefs['date_format_mini'] = array(
    'value' => '%x',
    'type' => 'enum',
    'enum' => array(
        '%x' => strftime('%x'),
        '%Y-%m-%d' => strftime('%Y-%m-%d'),
        '%d/%m/%Y' => strftime('%d/%m/%Y'),
        '%a, %b %e, %Y' => strftime('%a, %b %e, %Y'),
        '%a, %b %e, %y' => strftime('%a, %b %e, %y'),
        '%a, %b %e' => strftime('%a, %b %e'),
        '%a, %e %b %Y' => strftime('%a, %e %b %Y'),
        '%a, %e %b %y' => strftime('%a, %e %b %y'),
        '%a %d %b %Y' => strftime('%a %d %b %Y'),
        '%a %x' => strftime('%a %x'),
        '%a %Y-%m-%d' => strftime('%a %Y-%m-%d'),
        '%e %b %Y' => strftime('%e %b %Y'),
        '%e. %b %Y' => strftime('%e. %b %Y'),
        '%e. %m %Y' => strftime('%e %m %Y'),
        '%e. %m.' => strftime('%e. %m.'),
        '%b %e, %Y' => strftime('%b %e, %Y'),
    ),
    'desc' => _("Choose how to display dates (abbreviated format):"),
);

$_prefs['time_format'] = array(
    'value' => '%X',
    'type' => 'enum',
    'enum' => array(
        '%X' => strftime('%X') . ' (' . _("Default") . ')',
        '%H:%M:%S' => strftime('%H:%M:%S') . ' (' . _("24-hour format") . ')',
        '%l:%M:%S %p' => strftime('%l:%M:%S %p'),
        '%R' => strftime('%R') . ' (' . _("24-hour format") . ')',
        '%l:%M %p' => strftime('%l:%M %p'),
    ),
    'desc' => _("Choose how to display times:")
);

$_prefs['first_week_day'] = array(
    'value' => '0',
    'type' => 'enum',
    'enum' => array(
        '0' => _("Sunday"),
        '1' => _("Monday")
    ),
    'desc' => _("Which day would you like to be displayed as the first day of the week?")
);



// *** Categories/Labels Preferences ***

$prefGroups['categories'] = array(
    'column' => _("Your Information"),
    'label' => _("Categories and Labels"),
    'desc' => _("Manage the list of categories you have to label items with, and colors associated with those categories."),
    'members' => array('categorymanagement')
);

// UI for category management.
$_prefs['categorymanagement'] = array(
    'type' => 'special',
    'handler' => 'Horde_Prefs_Special_Category'
);

$_prefs['categories'] = array(
    'value' => ''
);

$_prefs['category_colors'] = array(
    'value' => ''
);



// *** Display Preferences ***

$prefGroups['display'] = array(
    'column' => _("Other Information"),
    'label' => _("Display Preferences"),
    'desc' => _("Set your startup application, color scheme, page refreshing, and other display preferences."),
    'members' => array(
        'initial_application', 'show_last_login', 'theme',
        'summary_refresh_time', 'sidebar_width',
        'menu_refresh_time', 'widget_accesskey'
    )
);

$_prefs['initial_application'] = array(
    'value' => '{{ horde_init_application | default('horde') }}',
    'type' => 'enum',
    'enum' => array(),
    'desc' => sprintf(_("What application should %s display after login?"), $GLOBALS['registry']->get('name')),
    'on_init' => function($ui) {
        $enum = array();
        $perms = $GLOBALS['injector']->getInstance('Horde_Perms');
        foreach ($GLOBALS['registry']->listApps(array('active')) as $a) {
            if (file_exists($GLOBALS['registry']->get('fileroot', $a)) &&
                (($perms->exists($a) && ($perms->hasPermission($a, $GLOBALS['registry']->getAuth(), Horde_Perms::READ) || $GLOBALS['registry']->isAdmin())) ||
                 !$perms->exists($a))) {
                $enum[$a] = $GLOBALS['registry']->get('name', $a);
            }
        }
        asort($enum);
        $ui->prefs['initial_application']['enum'] = $enum;
    },
);

$_prefs['show_last_login'] = array(
    'value' => true,
    'advanced' => true,
    'type' => 'checkbox',
    'desc' => _("Show last login time when logging in?")
);

// Last login time of user
$_prefs['last_login'] = array(
    // value is a serialized array of the UNIX timestamp of the last login,
    // and the host that the last login was from.
    // value = serialize(array())
    'value' => 'a:0:{}'
);

$_prefs['theme'] = array(
    'value' => 'default',
    'type' => 'enum',
    'enum' => Horde_Themes::themeList(),
    'desc' => _("Select your color scheme.")
);

$_prefs['summary_refresh_time'] = array(
    'value' => 300,
    'type' => 'enum',
    'enum' => array(
        0 => _("Never"),
        30 => _("Every 30 seconds"),
        60 => _("Every minute"),
        300 => _("Every 5 minutes"),
        900 => _("Every 15 minutes"),
        1800 => _("Every half hour")
    ),
    'desc' => _("Refresh Portal View:")
);

$_prefs['sidebar_width'] = array(
    'value' => 210,
    'type' => 'number',
    'desc' => sprintf(_("Width of the %s menu on the left:"), $GLOBALS['registry']->get('name', 'horde'))
);

$_prefs['menu_refresh_time'] = array(
    'value' => 300,
    'type' => 'enum',
    'enum' => array(
        0 => _("Never"),
        30 => _("Every 30 seconds"),
        60 => _("Every minute"),
        120 => _("Every 2 minutes"),
        300 => _("Every 5 minutes")
    ),
    'desc' => _("Refresh Dynamic Menu Elements:")
);

$_prefs['widget_accesskey'] = array(
    'value' => true,
    'advanced' => true,
    'type' => 'checkbox',
    'desc' => _("Should access keys be defined for most links?")
);

// The layout of the portal page.
$_prefs['portal_layout'] = array(
    // value = serialize(array())
    'value' => 'a:0:{}'
);



// *** Facebook Integration Preferences ***

$prefGroups['facebook'] = array(
    'column' => _("Other Information"),
    'label' => _("Facebook Integration"),
    'desc' => _("Set up integration with your Facebook account."),
    'members' => array('facebookmanagement'),
    'suppress' => function() {
        return (empty($GLOBALS['conf']['facebook']['enabled']) ||
                empty($GLOBALS['conf']['facebook']['id']) ||
                empty($GLOBALS['conf']['facebook']['secret']));
    }
);

$_prefs['facebookmanagement'] = array(
    'type' => 'special',
    'handler' => 'Horde_Prefs_Special_Facebook'
);

$_prefs['facebook'] = array(
    // value = serialize(array())
    'value' => 'a:0:{}'
);



// *** Twitter Intergration Preferences ***

$prefGroups['twitter'] = array(
    'column' => _("Other Information"),
    'label' => _("Twitter Integration"),
    'desc' => _("Set up integration with your Twitter account."),
    'members' => array('twittermanagement'),
    'suppress' => function() {
        return (empty($GLOBALS['conf']['twitter']['enabled']) ||
                empty($GLOBALS['conf']['twitter']['key']) ||
                empty($GLOBALS['conf']['twitter']['secret']));
    }
);

$_prefs['twittermanagement'] = array(
    'type' => 'special',
    'handler' => 'Horde_Prefs_Special_Twitter'
);

$_prefs['twitter'] = array(
    // value = serialize(array())
    'value' => 'a:0:{}'
);



// *** IMSP Intergration Preferences ***

$prefGroups['imspauth'] = array(
    'column' => _("Other Information"),
    'label' => _("Alternate IMSP Login"),
    'desc' => _("Use if name/password is different for IMSP server."),
    'members' => array('imsp_auth_user', 'imsp_auth_pass'),
    'suppress' => function() {
        return empty($GLOBALS['conf']['imsp']['enabled']);
    }
);

$_prefs['imsp_auth_user'] = array(
    'value' => '',
    'type' => 'text',
    'desc' => _("Alternate IMSP Username")
);

$_prefs['imsp_auth_pass'] = array(
    'value' => '',
    'type' => 'password',
    'desc' => _("Alternate IMSP Password")
);



// *** SyncML Preferences ***

$prefGroups['syncml'] = array(
    'column' => _("Other Information"),
    'label' => _("SyncML"),
    'desc' => _("Configuration for syncing with PDAs, Smartphones and Outlook."),
    'members' => array('syncmlmanagement'),
    'suppress' => function() {
        return !class_exists('Horde_SyncMl_Backend');
    }
);

$_prefs['syncmlmanagement'] = array(
    'type' => 'special',
    'handler' => 'Horde_Prefs_Special_Syncml'
);



// *** ActiveSync Preferences ***

$prefGroups['activesync'] = array(
    'column' => _("Other Information"),
    'label' => _("ActiveSync"),
    'desc' => _("Manage your ActiveSync devices."),
    'members' => array('activesync_replyposition', 'activesyncmanagement'),
    'suppress' => function() {
        return empty($GLOBALS['conf']['activesync']['enabled']);
    }
);

$_prefs['activesyncmanagement'] = array(
    'type' => 'special',
    'handler' => 'Horde_Prefs_Special_Activesync'
);

$_prefs['activesync_replyposition'] = array(
    'type' => 'enum',
    'desc' => _("Position of reply text when replying to email on your device. Note that some devices will always send the citation string at the end of the reply text."),
    'enum' => array('bottom' => _("Bottom"), 'top' => _("Top")),
    'value' => 'bottom',
    'suppress' => function() {
        return empty($GLOBALS['conf']['activesync']['emailsync']);
    }
);
// Handled by the special.
// 'horde' = The horde configured default identity.
// integer - The identity identifier.
$_prefs['activesync_identity'] = array(
    'value' => 'horde'
);


// *** Internal Preferences ***

// Last time login tasks were run.
$_prefs['last_logintasks'] = array(
    // value = serialize(array())
    'value' => 'a:0:{}'
);

// Track login upgrade tasks.
$_prefs['upgrade_tasks'] = array(
    // value = serialize(array())
    'value' => 'a:0:{}'
);